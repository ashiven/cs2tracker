name: PyInstaller

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "ubuntu-latest"]

    env:
      MAIN_FILE: '"./cs2tracker/__main__.py"'
      NAME: '"cs2tracker"'
      ICON: '"./assets/icon.png"'
      WINDOWS_ICON_INCLUDE: '"./assets/icon.png;./assets"'
      WINDOWS_DATA_DIR_INCLUDE: '"./cs2tracker/data;./data"'
      WINDOWS_NODE_MODULES_INCLUDE: '"./node_modules;./data/node_modules"'
      LINUX_ICON_INCLUDE: '"./assets/icon.png:./assets"'
      LINUX_DATA_DIR_INCLUDE: '"./cs2tracker/data:./data"'
      LINUX_NODE_MODULES_INCLUDE: '"./node_modules:./data/node_modules"'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24.3.0

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: npm install steam-user globaloffensive axios @node-steam/vdf

      - name: Install PyInstaller
        run: pip install pyinstaller
          
      - name: Locate eurofxref-hist.zip Windows
        if: matrix.os == 'windows-latest'
        run: |
          $ZIP_PATH = python -c "import currency_converter, os; print(os.path.join(os.path.dirname(currency_converter.__file__), 'eurofxref-hist.zip'))"
          echo "WINDOWS_CURRENCY_INCLUDE='$ZIP_PATH;./currency_converter'" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Locate eurofxref-hist.zip Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          ZIP_PATH=$(python -c "import currency_converter, os; print(os.path.join(os.path.dirname(currency_converter.__file__), 'eurofxref-hist.zip'))")
          echo "LINUX_CURRENCY_INCLUDE=$ZIP_PATH:./currency_converter" >> $GITHUB_ENV

      - name: Locate nodejs-bin files Windows
        if: matrix.os == 'windows-latest'
        run: |
          $NODE_BIN_PATH = python -c "import nodejs, os; print(os.path.dirname(nodejs.__file__))"
          echo "WINDOWS_NODE_BIN_INCLUDE='$NODE_BIN_PATH;./nodejs'" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Locate nodejs-bin files Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          NODE_BIN_PATH=$(python -c "import nodejs, os; print(os.path.dirname(nodejs.__file__))")
          echo "LINUX_NODE_BIN_INCLUDE=$NODE_BIN_PATH:./nodejs" >> $GITHUB_ENV

      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --noconfirm --onedir --windowed --name ${{ env.NAME }} --icon ${{ env.ICON }} `
            --add-data ${{ env.WINDOWS_ICON_INCLUDE }} `
            --add-data ${{ env.WINDOWS_DATA_DIR_INCLUDE }} `
            --add-data ${{ env.WINDOWS_NODE_MODULES_INCLUDE }} `
            --add-data ${{ env.WINDOWS_CURRENCY_INCLUDE }} `
            --add-data ${{ env.WINDOWS_NODE_BIN_INCLUDE }} `
            ${{ env.MAIN_FILE }}

      - name: Build Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --noconfirm --onefile --windowed --name ${{ env.NAME }} --icon ${{ env.ICON }} \
            --add-data ${{ env.LINUX_ICON_INCLUDE }} \
            --add-data ${{ env.LINUX_DATA_DIR_INCLUDE }} \
            --add-data ${{ env.LINUX_NODE_MODULES_INCLUDE }} \
            --add-data ${{ env.LINUX_CURRENCY_INCLUDE }} \
            --add-data ${{ env.LINUX_NODE_BIN_INCLUDE }} \
            ${{ env.MAIN_FILE }}
            
      - name: Replace version in setup.iss
        shell: bash
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          sed -i "s/latest/$VERSION/g" setup.iss
    
      - name: Create Windows installer
        if: matrix.os == 'windows-latest'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: setup.iss
          options: /O+

      - name: Zip Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: zip cs2tracker-linux.zip dist/cs2tracker

      - name: Generate SHA256 checksum Windows
        if: matrix.os == 'windows-latest'
        run: shasum -a 256 Output/cs2tracker-setup.exe > cs2tracker-setup.exe.sha256

      - name: Generate SHA256 checksum Linux
        if: matrix.os == 'ubuntu-latest'
        run: shasum -a 256 cs2tracker-linux.zip > cs2tracker-linux.zip.sha256

      - name: Upload Windows executable
        if: matrix.os == 'windows-latest'
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["Output/cs2tracker-setup.exe", "cs2tracker-setup.exe.sha256"]'

      - name: Upload Linux executable
        if: matrix.os == 'ubuntu-latest'
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["cs2tracker-linux.zip", "cs2tracker-linux.zip.sha256"]'
